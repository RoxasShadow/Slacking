#!/usr/bin/env ruby
##########################################################################
#    Giovanni Capuano <webmaster@giovannicapuano.net>
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
##########################################################################
require 'slacking'

config_file_name = '/home/giovanni/Scrivania/Slacking/bin/config'
abort 'config not found' if !File.exists? config_file_name
datas = Slacking::Slacking.get_config(config_file_name)

abort 'No message to send.' if ARGV.length == 0
message = ARGV[0]

exc = {}
exc[:nerdz] = exc[:twitter] = exc[:facebook] = true
ARGV.each { |argv, i|
	next if i == 0
	exc[:nerdz] = false if argv == '--no-nerdz'
	exc[:twitter] = false if argv == '--no-twitter'
	exc[:facebook] = false if argv == '--no-facebook'
}

def nerdz(datas, message)
	abort 'No config for nerdz.' if datas[:nerdz] == nil
	username = datas[:nerdz][0]
	password = datas[:nerdz][1]
	nerdz = Slacking::Nerdz.new

	res = nerdz.login(username, password)
	abort "Nerdz: Login failed. \##{res[1]}" if !res[0]

	res = nerdz.get_id(username)
	if res[0]
		id = res[2]
	else
		abort "Nerdz: ID obtaining failed. \##{res[1]}" if !res[0]
	end

	res = nerdz.post(message, id)
	if res[0]
		puts 'Nerdz: Post sent successfully.'
	else
		abort "Nerdz: Login failed. \##{res[1]}"
	end
end

def twitter(datas, message)
	abort 'No config for twitter.' if datas[:twitter] == nil
	consumer_key = datas[:twitter][0]
	consumer_secret = datas[:twitter][1]
	oauth_token = datas[:twitter][2]
	oauth_token_secret = datas[:twitter][3]
	
	abort "Twitter: Message too long (#{message.length}). Max 140 characters." if message.length > 140
	begin
		Slacking::Twitter.new(consumer_key, consumer_secret, oauth_token, oauth_token_secret).post(message).to_s
	rescue; end
	puts 'Twitter: Post (maybe) sent successfully.'
end

def facebook(datas, message)
	abort 'No config for facebook.' if datas[:facebook] == nil
	app_id = datas[:facebook][0]
	input_token = datas[:facebook][1]
	
	if input_token == nil
		url = Slacking::Facebook.get_url(app_id)
		puts "Facebook: Open...\n#{url}\n...and copy&paste here the code= url param"
		input_token = STDIN.gets.chomp
	end
	
	token = Slacking::Facebook.get_token(input_token)
	access_token = token[:access_token]
	expires = token[:expires]

	begin
		Slacking::Facebook.new(access_token).post(message)
	rescue; end
	puts 'Facebook: Post (maybe) sent successfully.'
end

nerdz(datas, message) if exc[:nerdz]
twitter(datas, message) if exc[:twitter]
facebook(datas, message) if exc[:facebook]
